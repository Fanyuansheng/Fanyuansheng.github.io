<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>范远昇的个人网站 Blog</title>
        <link>https://Fanyuansheng.github.io/en/blog</link>
        <description>范远昇的个人网站 Blog</description>
        <lastBuildDate>Tue, 29 Nov 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[VSCode终端常用命令和快捷键]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/VSCode</link>
            <guid>VSCode</guid>
            <pubDate>Tue, 29 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[1.打开"运行"对话框（Win+R），输入cmd，打开控制台命令窗口...]]></description>
            <content:encoded><![CDATA[<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1打开运行对话框winr输入cmd打开控制台命令窗口">1.打开"运行"对话框（Win+R），输入cmd，打开控制台命令窗口...<a class="hash-link" href="#1打开运行对话框winr输入cmd打开控制台命令窗口" title="Direct link to heading">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="也可以通过cmd-c-命令-和-cmd-k-命令的方式来直接运行命令">也可以通过cmd /c 命令 和 cmd /k 命令的方式来直接运行命令<a class="hash-link" href="#也可以通过cmd-c-命令-和-cmd-k-命令的方式来直接运行命令" title="Direct link to heading">​</a></h4><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2在文件夹空白处按住shift然后右键弹出快捷菜单可以看到在此处打开命令行窗口">2.在文件夹空白处按住Shift，然后右键弹出快捷菜单，可以看到“在此处打开命令行窗口”<a class="hash-link" href="#2在文件夹空白处按住shift然后右键弹出快捷菜单可以看到在此处打开命令行窗口" title="Direct link to heading">​</a></h4><p>清屏                                              cls</p><p>显示当前文件夹下的内容             dir或者ls</p><p>进入到当前盘的根目录                cd<!-- -->\</p><p>进入到上一级目录                        cd..</p><p>进入到指定目录                           cd目录名</p><p>停止node程序                              ctrl + c</p><p>自动补全                                       ab</p><p>调出历史命令                              上下箭头</p><p>复制粘贴                                      鼠标右键</p><p>创建目录                                       md</p><p>删除目录                                     rd</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="常用的vscode快捷键">常用的vscode快捷键<a class="hash-link" href="#常用的vscode快捷键" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1--格式化代码">1.  格式化代码<a class="hash-link" href="#1--格式化代码" title="Direct link to heading">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">这个快捷键可以帮助我们对代码进行锁进。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在 Windows 上：Shift + Alt + F</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-向上向下-复制行">2 向上/向下 复制行<a class="hash-link" href="#2-向上向下-复制行" title="Direct link to heading">​</a></h3><p>在 Windows 上：Shift + Alt + Up/Down</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-单词选中">3 单词选中<a class="hash-link" href="#3-单词选中" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl+ d</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-打开关闭侧边栏">4 打开关闭侧边栏<a class="hash-link" href="#4-打开关闭侧边栏" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl+ b</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="5-删除上一个词">5 删除上一个词<a class="hash-link" href="#5-删除上一个词" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl + backspace.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="6-选中词">6 选中词<a class="hash-link" href="#6-选中词" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl + Shift + 右键头 / 左键头.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="7-复制行">7 复制行<a class="hash-link" href="#7-复制行" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl + Shift + d</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-删除行">8 删除行<a class="hash-link" href="#8-删除行" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl + x</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="9-跳转到特定行">9 跳转到特定行<a class="hash-link" href="#9-跳转到特定行" title="Direct link to heading">​</a></h3><p>注：在文件中进行行跳转，你可以使用Ctrl + G ，然后输入要跳转的行号，当然，你也可以使用Ctrl + P，然后输入：和要跳转的行号。</p><p>在 Windows 上：Ctrl + g</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="10-添加多个光标">10 添加多个光标<a class="hash-link" href="#10-添加多个光标" title="Direct link to heading">​</a></h3><p>在 Windows 上：Ctrl + Alt + Up/Down</p>]]></content:encoded>
            <category>VSCode</category>
            <category>命令行</category>
        </item>
        <item>
            <title><![CDATA[C语言爱心代码]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/C</link>
            <guid>C</guid>
            <pubDate>Mon, 28 Nov 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#include &lt;stdio.h&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#include &lt;math.h&gt; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#include &lt;windows.h&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#include &lt;tchar.h&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> float f(float x, float y, float z){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> float a = x * x + 9.0f / 4.0f * y * y + z * z - 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> return a * a * a - x * x * z * z * z - 9.0f / 80.0f * y * y * z * z * z; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> float h(float x, float z) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   for (float y = 1.0f; y &gt;= 0.0f; y -= 0.001f)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> if (f(x, y, z)  &lt;= 0.0f) </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> return y;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> return 0.0f;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  int main(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  HANDLE o = GetStdHandle(STD_OUTPUT_HANDLE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  _TCHAR buffer[25][80] = { _T(' ') };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  _TCHAR ramp[] = _T(".:-=+*#%@");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  for (float t = 0.0f;; t += 0.1f) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     int sy = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float s = sinf(t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float a = s * s * s * s * 0.2f;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     for (float z = 1.3f; z &gt; -1.2f; z -= 0.1f){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     _TCHAR* p = &amp;buffer[sy++][0];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float tz = z * (1.2f - a);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     for (float x = -1.5; x &lt; 1.5f; x += 0.05f) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float tx = x * (1.2f + a);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float v = f(tx, 0.0f, tz);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     if (v &lt;= 0.0f){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float y0 = h(tx, tz);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float ny = 0.01f;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float nx = h(tx + ny, tz) - y0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float nz = h(tx, tz + ny) - y0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float nd = 1.0f / sqrtf(nx * nx + ny * ny + nz * nz);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     float d = (nx + ny - nz) * nd * 0.5f + 0.5f;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *p++ = ramp[(int)(d * 5.0f)];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     *p++ = ' ';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     for (sy = 0; sy &lt; 25; sy++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     COORD coord = { 0, sy };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     SetConsoleCursorPosition(o, coord);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     WriteConsole(o, buffer[sy], 79, NULL,0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Sleep(33);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>C</category>
        </item>
        <item>
            <title><![CDATA[Javascript爱心代码]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/Javascript</link>
            <guid>Javascript</guid>
            <pubDate>Mon, 28 Nov 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;HTML&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> &lt;HEAD&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;TITLE&gt; heart &lt;/TITLE&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;META NAME="Generator" CONTENT="EditPlus"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;META NAME="Author" CONTENT=""&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;META NAME="Keywords" CONTENT=""&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;META NAME="Description" CONTENT=""&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  html, body {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  height: 100%;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  padding: 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  margin: 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  background: white;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">canvas {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  position: absolute;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  width: 100%;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  height: 100%;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;/style&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> &lt;/HEAD&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> &lt;BODY&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;canvas id="pinkboard"&gt;&lt;/canvas&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  /*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Settings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var settings = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  particles: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    length:   500, // maximum amount of particles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    duration:   2, // particle duration in sec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    velocity: 100, // particle velocity in pixels/sec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    effect: -0.75, // play with this for a nice effect</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size:      30, // particle size in pixels</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * RequestAnimationFrame polyfill by Erik Möller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(function(){var b=0;var c=["ms","moz","webkit","o"];for(var a=0;a&lt;c.length&amp;&amp;!window.requestAnimationFrame;++a){window.requestAnimationFrame=window[c[a]+"RequestAnimationFrame"];window.cancelAnimationFrame=window[c[a]+"CancelAnimationFrame"]||window[c[a]+"CancelRequestAnimationFrame"]}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(h,e){var d=new Date().getTime();var f=Math.max(0,16-(d-b));var g=window.setTimeout(function(){h(d+f)},f);b=d+f;return g}}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(d){clearTimeout(d)}}}());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Point class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var Point = (function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function Point(x, y) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.x = (typeof x !== 'undefined') ? x : 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.y = (typeof y !== 'undefined') ? y : 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Point.prototype.clone = function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return new Point(this.x, this.y);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Point.prototype.length = function(length) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (typeof length == 'undefined')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return Math.sqrt(this.x * this.x + this.y * this.y);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.normalize();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.x *= length;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.y *= length;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return this;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Point.prototype.normalize = function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var length = this.length();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.x /= length;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.y /= length;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return this;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return Point;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Particle class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var Particle = (function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function Particle() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.position = new Point();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.velocity = new Point();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.acceleration = new Point();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.age = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Particle.prototype.initialize = function(x, y, dx, dy) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.position.x = x;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.position.y = y;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.velocity.x = dx;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.velocity.y = dy;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.acceleration.x = dx * settings.particles.effect;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.acceleration.y = dy * settings.particles.effect;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.age = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Particle.prototype.update = function(deltaTime) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.position.x += this.velocity.x * deltaTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.position.y += this.velocity.y * deltaTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.velocity.x += this.acceleration.x * deltaTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.velocity.y += this.acceleration.y * deltaTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.age += deltaTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Particle.prototype.draw = function(context, image) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function ease(t) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return (--t) * t * t + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var size = image.width * ease(this.age / settings.particles.duration);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.globalAlpha = 1 - this.age / settings.particles.duration;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return Particle;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * ParticlePool class</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var ParticlePool = (function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  var particles,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      firstActive = 0,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      firstFree   = 0,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      duration    = settings.particles.duration;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function ParticlePool(length) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // create and populate particle pool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    particles = new Array(length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (var i = 0; i &lt; particles.length; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      particles[i] = new Particle();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ParticlePool.prototype.add = function(x, y, dx, dy) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    particles[firstFree].initialize(x, y, dx, dy);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // handle circular queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    firstFree++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstFree   == particles.length) firstFree   = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstActive == firstFree       ) firstActive++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstActive == particles.length) firstActive = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ParticlePool.prototype.update = function(deltaTime) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var i;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // update active particles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstActive &lt; firstFree) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      for (i = firstActive; i &lt; firstFree; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        particles[i].update(deltaTime);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstFree &lt; firstActive) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      for (i = firstActive; i &lt; particles.length; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        particles[i].update(deltaTime);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      for (i = 0; i &lt; firstFree; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        particles[i].update(deltaTime);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // remove inactive particles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (particles[firstActive].age &gt;= duration &amp;&amp; firstActive != firstFree) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      firstActive++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (firstActive == particles.length) firstActive = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ParticlePool.prototype.draw = function(context, image) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // draw active particles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstActive &lt; firstFree) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      for (i = firstActive; i &lt; firstFree; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        particles[i].draw(context, image);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (firstFree &lt; firstActive) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      for (i = firstActive; i &lt; particles.length; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        particles[i].draw(context, image);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      for (i = 0; i &lt; firstFree; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        particles[i].draw(context, image);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return ParticlePool;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Putting it all together</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(function(canvas) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  var context = canvas.getContext('2d'),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      particles = new ParticlePool(settings.particles.length),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      particleRate = settings.particles.length / settings.particles.duration, // particles/sec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      time;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // get point on heart with -PI &lt;= t &lt;= PI</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function pointOnHeart(t) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return new Point(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      160 * Math.pow(Math.sin(t), 3),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // creating the particle image using a dummy canvas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  var image = (function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var canvas  = document.createElement('canvas'),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context = canvas.getContext('2d');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas.width  = settings.particles.size;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas.height = settings.particles.size;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // helper function to create the path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function to(t) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      var point = pointOnHeart(t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return point;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // create the path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.beginPath();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var t = -Math.PI;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var point = to(t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.moveTo(point.x, point.y);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (t &lt; Math.PI) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      t += 0.01; // baby steps!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      point = to(t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      context.lineTo(point.x, point.y);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.closePath();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // create the fill</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.fillStyle = 'red';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.fill();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // create the image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var image = new Image();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    image.src = canvas.toDataURL();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return image;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  })();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // render that thing!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function render() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // next animation frame</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    requestAnimationFrame(render);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // update time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var newTime   = new Date().getTime() / 1000,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        deltaTime = newTime - (time || newTime);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time = newTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // clear canvas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context.clearRect(0, 0, canvas.width, canvas.height);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // create new particles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var amount = particleRate * deltaTime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (var i = 0; i &lt; amount; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      var dir = pos.clone().length(settings.particles.velocity);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // update and draw particles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    particles.update(deltaTime);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    particles.draw(context, image);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // handle (re-)sizing of the canvas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function onResize() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas.width  = canvas.clientWidth;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas.height = canvas.clientHeight;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  window.onresize = onResize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // delay rendering bootstrap</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  setTimeout(function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    onResize();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    render();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }, 10);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})(document.getElementById('pinkboard'));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> &lt;/BODY&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/HTML&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>Javascript</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[python版爱心代码]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/python</link>
            <guid>python</guid>
            <pubDate>Mon, 28 Nov 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import random</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">from math import sin, cos, pi, log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">from tkinter import *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import ctypes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user32 = ctypes.windll.user32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CANVAS_WIDTH = user32.GetSystemMetrics(0)  # 画布的宽</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CANVAS_HEIGHT = user32.GetSystemMetrics(1)  # 画布的高</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CANVAS_CENTER_X = CANVAS_WIDTH / 2  # 画布中心的X轴坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CANVAS_CENTER_Y = CANVAS_HEIGHT / 2  # 画布中心的Y轴坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_ENLARGE = 11  # 放大比例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HEART_COLOR = "#ff2121"  # 心的颜色，这个是中国红</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def heart_function(t, shrink_ratio: float = IMAGE_ENLARGE):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    “爱心函数生成器”</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param shrink_ratio: 放大比例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param t: 参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :return: 坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 基础函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x = 16 * (sin(t) ** 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    y = -(13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 放大</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x *= shrink_ratio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    y *= shrink_ratio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 移到画布中央</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    x += CANVAS_CENTER_X</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    y += CANVAS_CENTER_Y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return int(x), int(y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def scatter_inside(x, y, beta=0.15):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    随机内部扩散</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param x: 原x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param y: 原y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param beta: 强度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :return: 新坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ratio_x = - beta * log(random.random())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ratio_y = - beta * log(random.random())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dx = ratio_x * (x - CANVAS_CENTER_X)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dy = ratio_y * (y - CANVAS_CENTER_Y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return x - dx, y - dy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def shrink(x, y, ratio):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    抖动</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param x: 原x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param y: 原y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param ratio: 比例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :return: 新坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    force = -1 / (((x - CANVAS_CENTER_X) ** 2 + (y - CANVAS_CENTER_Y) ** 2) ** 0.6)  # 这个参数...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dx = ratio * force * (x - CANVAS_CENTER_X)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dy = ratio * force * (y - CANVAS_CENTER_Y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return x - dx, y - dy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def curve(p):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    自定义曲线函数，调整跳动周期</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :param p: 参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    :return: 正弦</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 可以尝试换其他的动态函数，达到更有力量的效果（贝塞尔？）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return 2 * (2 * sin(4 * p)) / (2 * pi)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class Heart:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    爱心类</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    """</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def __init__(self, generate_frame=20):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self._points = set()  # 原始爱心坐标集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self._edge_diffusion_points = set()  # 边缘扩散效果点坐标集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self._center_diffusion_points = set()  # 中心扩散效果点坐标集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.all_points = {}  # 每帧动态点坐标</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.build(2000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.random_halo = 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.generate_frame = generate_frame</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for frame in range(generate_frame):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self.calc(frame)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def build(self, number):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 爱心</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for _ in range(number):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            t = random.uniform(0, 2 * pi)  # 随机不到的地方造成爱心有缺口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = heart_function(t)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self._points.add((x, y))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 爱心内扩散</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for _x, _y in list(self._points):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            for _ in range(3):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                x, y = scatter_inside(_x, _y, 0.05)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                self._edge_diffusion_points.add((x, y))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 爱心内再次扩散</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        point_list = list(self._points)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for _ in range(4000):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = random.choice(point_list)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = scatter_inside(x, y, 0.17)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self._center_diffusion_points.add((x, y))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @staticmethod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def calc_position(x, y, ratio):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 调整缩放比例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        force = 1 / (((x - CANVAS_CENTER_X) ** 2 + (y - CANVAS_CENTER_Y) ** 2) ** 0.520)  # 魔法参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dx = ratio * force * (x - CANVAS_CENTER_X) + random.randint(-1, 1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dy = ratio * force * (y - CANVAS_CENTER_Y) + random.randint(-1, 1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return x - dx, y - dy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def calc(self, generate_frame):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ratio = 10 * curve(generate_frame / 10 * pi)  # 圆滑的周期的缩放比例</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        halo_radius = int(4 + 6 * (1 + curve(generate_frame / 10 * pi)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        halo_number = int(3000 + 4000 * abs(curve(generate_frame / 10 * pi) ** 2))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        all_points = []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 光环</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        heart_halo_point = set()  # 光环的点坐标集合</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for _ in range(halo_number):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            t = random.uniform(0, 2 * pi)  # 随机不到的地方造成爱心有缺口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = heart_function(t, shrink_ratio=11.6)  # 魔法参数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = shrink(x, y, halo_radius)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (x, y) not in heart_halo_point:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                # 处理新的点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                heart_halo_point.add((x, y))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                x += random.randint(-14, 14)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                y += random.randint(-14, 14)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                size = random.choice((1, 2, 2))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                all_points.append((x, y, size))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 轮廓</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for x, y in self._points:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = self.calc_position(x, y, ratio)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            size = random.randint(1, 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            all_points.append((x, y, size))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 内容</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for x, y in self._edge_diffusion_points:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = self.calc_position(x, y, ratio)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            size = random.randint(1, 2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            all_points.append((x, y, size))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for x, y in self._center_diffusion_points:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            x, y = self.calc_position(x, y, ratio)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            size = random.randint(1, 2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            all_points.append((x, y, size))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.all_points[generate_frame] = all_points</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    def render(self, render_canvas, render_frame):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for x, y, size in self.all_points[render_frame % self.generate_frame]:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            render_canvas.create_rectangle(x, y, x + size, y + size, width=0, fill=HEART_COLOR)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">def draw(main: Tk, render_canvas: Canvas, render_heart: Heart, render_frame=0):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    render_canvas.delete('all')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    render_heart.render(render_canvas, render_frame)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    main.after(160, draw, main, render_canvas, render_heart, render_frame + 1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if __name__ == '__main__':</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root = Tk()  # 一个Tk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root.attributes('-fullscreen', True)  # 全屏</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root.attributes('-alpha', 0.9)  # 透明度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas = Canvas(root, bg='black', height=CANVAS_HEIGHT, width=CANVAS_WIDTH)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    canvas.pack()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    heart = Heart()  # 心</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    draw(root, canvas, heart)  # 开始画画~</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root.mainloop()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>python</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[Git命令]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/hello</link>
            <guid>hello</guid>
            <pubDate>Sat, 26 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Git]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="git">Git<a class="hash-link" href="#git" title="Direct link to heading">​</a></h2><ol><li><p>安装（略）</p></li><li><p>配置</p><ol><li><p>配置name和email</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global user.name </span><span class="token string" style="color:#e3116c">"xxxx"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global user.email </span><span class="token string" style="color:#e3116c">"xxx@xxx.xxx"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ol></li><li><p>使用git：</p><ul><li><p>查看当前仓库的状态</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> status</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>初始化仓库</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> init</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>文件状态：</p><ol><li>未跟踪</li><li>已跟踪</li><li>暂存</li><li>未修改</li><li>已修改</li></ol></li><li><p>未跟踪 → 暂存</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> 将文件切换到暂存的状态</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> * 将所有已修改（未跟踪）的文件暂存</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>暂存 → 未修改</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m </span><span class="token string" style="color:#e3116c">"xxxx"</span><span class="token plain"> 将暂存的文件存储到仓库中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -a -m </span><span class="token string" style="color:#e3116c">"xxxx"</span><span class="token plain"> 提交所有已修改的文件（未跟踪的文件不会提交）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>未修改 → 修改</p><ul><li>修改代码后，文件会变为修改状态</li></ul></li></ul></li><li><p>常用的命令</p><ol><li>重置文件</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> restore </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 恢复文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> restore --staged </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 取消暂存状态</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>删除文件	</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rm</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 删除文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rm</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> -f </span><span class="token comment" style="color:#999988;font-style:italic"># 强制删除</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>移动文件</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mv</span><span class="token plain"> from to </span><span class="token comment" style="color:#999988;font-style:italic"># 移动文件 重命名文件</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ol><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="分支">分支<a class="hash-link" href="#分支" title="Direct link to heading">​</a></h3><p>   git在存储文件时，每一次代码代码的提交都会创建一个与之对应的节点，git就是通过一个一个的节点来记录代码的状态的。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情况下仓库只有一个分支，命名为master。在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他的分支。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch </span><span class="token comment" style="color:#999988;font-style:italic"># 查看当前分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">branch name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 创建新的分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch -d </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">branch name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 删除分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> switch </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">branch name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 切换分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> switch -c </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">branch name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 创建并切换分支</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> merge </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">branch name</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 和并分支</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>   在开发中，都是在自己的分支上编写代码，代码编写完成后，在将自己的分支合并到主分支中。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="变基rebase">变基（rebase）<a class="hash-link" href="#变基rebase" title="Direct link to heading">​</a></h3><p>   在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并。</p><p>   我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱。</p><p>   原理（变基时发生了什么）：</p><ol><li><p>当我们发起变基时，git会首先找到两条分支的最近的共同祖先</p></li><li><p>对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中</p></li><li><p>将当前部分指向目标的基底</p></li><li><p>以当前基底开始，重新执行历史操作</p><p>变基和merge对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，那么这时尽量不要变基。</p></li></ol><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="远程仓库remote">远程仓库（remote）<a class="hash-link" href="#远程仓库remote" title="Direct link to heading">​</a></h3><p>   目前我对于git所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的git仓库。远程的git仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。我们学习阶段，直接使用一些开放的公共git仓库。目前我们常用的库有两个：GitHub和Gitee（码云）</p><p>   将本地库上传git：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> origin https://github.com/lilichao/git-demo.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># git remote add &lt;remote name&gt; &lt;url&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> branch -M main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 修改分支的名字的为main</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push -u origin main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># git push 将代码上传服务器上</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>   将本地库上传gitee：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> gitee https://gitee.com/ymhold/vue-course.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push -u gitee main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="远程库的操作的命令">远程库的操作的命令<a class="hash-link" href="#远程库的操作的命令" title="Direct link to heading">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token comment" style="color:#999988;font-style:italic"># 列出当前的关联的远程库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">远程库名</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">url</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 关联远程仓库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> remote remove </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">远程库名</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># 删除远程库</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push -u </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">远程库名</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">分支名</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 向远程库推送代码，并和当前分支关联</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">远程库</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">本地分支</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">:</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">远程分支</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">url</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 从远程库下载代码</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push </span><span class="token comment" style="color:#999988;font-style:italic"># 如果本地的版本低于远程库，push默认是推不上去</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> fetch </span><span class="token comment" style="color:#999988;font-style:italic"># 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic"># 使用fetch拉取代码后，必须要手动对代码进行合并    </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> pull  </span><span class="token comment" style="color:#999988;font-style:italic"># 从服务器上拉取代码并自动合并 </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>   注意：推送代码之前，一定要先从远程库中拉取最新的代码</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tag-标签">tag 标签<a class="hash-link" href="#tag-标签" title="Direct link to heading">​</a></h3><ul><li><p>当头指针没有指向某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。</p></li><li><p>如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> switch -c </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">分支名</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">提交id</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> tag 版本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> tag 版本 提交id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push 远程仓库 标签名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push 远程仓库 --tags</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> tag -d 标签名 </span><span class="token comment" style="color:#999988;font-style:italic"># 删除标签</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> push 远程仓库 --delete 标签名 </span><span class="token comment" style="color:#999988;font-style:italic"># 删除远程标签</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="gitignore">gitignore<a class="hash-link" href="#gitignore" title="Direct link to heading">​</a></h3><ul><li>默认情况下，git会监视项目中所有内容，但是有些内容比如node_modules目录中的内容，我们不希望它被git所管理。我们可以在项目目录中添加一个<code>.gitignore</code>文件，来设置那些需要git忽略的文件。</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="github的静态页面">github的静态页面<a class="hash-link" href="#github的静态页面" title="Direct link to heading">​</a></h3><ul><li>在github中，可以将自己的静态页面之间部署到github中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。</li><li>要求：<ul><li>静态页面的分支必须叫做：gh-pages</li><li>如果希望页面可以通过xxx.github.io访问，则需要将库的名字配置为xxx.github.io </li></ul></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="docusaurus">docusaurus<a class="hash-link" href="#docusaurus" title="Direct link to heading">​</a></h3><ul><li><p>facebook推出的开源的静态的内容管理系统，通过它可以快速的部署一个静态网站</p></li><li><p>使用：</p><ul><li><p>网址：</p><ul><li><a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">https://docusaurus.io/</a></li></ul></li><li><p>安装</p><ul><li><code>npx create-docusaurus@latest my-website classic</code></li></ul></li><li><p>启动项目</p><ul><li><code>npm start</code>或<code>yarn start</code></li></ul></li><li><p>构建项目</p><ul><li><code>npm run build</code>或<code>yarn build</code></li><li></li></ul></li><li><p>配置项目：</p><ul><li>docusaurus.config.js 项目的配置文件</li></ul></li><li><p>添加页面：</p><ul><li>在docusaurus框架中，页面分成三种：1.page，2.blog，3.doc</li></ul></li><li><p>案例地址：</p><ul><li><a href="https://Fanyuansheng.top" target="_blank" rel="noopener noreferrer">https://Fanyuansheng.top</a></li></ul></li></ul></li></ul>]]></content:encoded>
            <category>Git</category>
            <category>docusaurus</category>
            <category>Github</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/welcome</link>
            <guid>welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/en/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>The blog supports tags as well!</p><p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
            <category>facebook</category>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[MDX Blog Post]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></description>
            <content:encoded><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'button clicked!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div>]]></content:encoded>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[Long Blog Post]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/long-blog-post</link>
            <guid>long-blog-post</guid>
            <pubDate>Wed, 29 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the summary of a very long blog post,]]></description>
            <content:encoded><![CDATA[<p>This is the summary of a very long blog post,</p><p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[First Blog Post]]></title>
            <link>https://Fanyuansheng.github.io/en/blog/first-blog-post</link>
            <guid>first-blog-post</guid>
            <pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet]]></description>
            <content:encoded><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
            <category>hola</category>
            <category>docusaurus</category>
        </item>
    </channel>
</rss>